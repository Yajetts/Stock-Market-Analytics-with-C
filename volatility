#include <stdio.h>
#include <math.h>
#include <string.h>

struct StockData {
    char date[6];  // Format: MM-DD (5 chars + null)
    double price;
};

struct Metrics {
    double avgReturn;
    double volatility;
    double debtRatio;
    char volRiskLevel[10];
    char debtRiskLevel[10];
    char combinedRiskLevel[10];
};

double calculate_return(double current, double previous) {
    return (current - previous) / previous;
}

double calculate_mean(double arr[], int n) {
    double sum = 0.0;
    for (int i = 0; i < n; i++) sum += arr[i];
    return sum / n;
}

double calculate_std_dev(double arr[], int n) {
    double mean = calculate_mean(arr, n);
    double sum_squared_diff = 0.0;
    for (int i = 0; i < n; i++) {
        double diff = arr[i] - mean;
        sum_squared_diff += diff * diff;
    }
    return sqrt(sum_squared_diff / (n - 1));
}

void assess_volatility_risk(double volatility, char *riskLevel) {
    if (volatility < 0.01)
        strcpy(riskLevel, "Low");
    else if (volatility < 0.02)
        strcpy(riskLevel, "Medium");
    else
        strcpy(riskLevel, "High");
}

void assess_debt_risk(double debtRatio, char *riskLevel) {
    if (debtRatio < 0.3)
        strcpy(riskLevel, "Low");
    else if (debtRatio < 0.6)
        strcpy(riskLevel, "Medium");
    else
        strcpy(riskLevel, "High");
}

// Helper to convert risk string to numeric level for easy comparison
int risk_level_to_int(const char *risk) {
    if (strcmp(risk, "Low") == 0) return 1;
    if (strcmp(risk, "Medium") == 0) return 2;
    if (strcmp(risk, "High") == 0) return 3;
    return 0;
}

void assess_combined_risk(const char *volRisk, const char *debtRisk, char *combinedRisk) {
    int vol = risk_level_to_int(volRisk);
    int debt = risk_level_to_int(debtRisk);

    int maxRisk = vol > debt ? vol : debt;

    if (maxRisk == 1)
        strcpy(combinedRisk, "Low");
    else if (maxRisk == 2)
        strcpy(combinedRisk, "Medium");
    else
        strcpy(combinedRisk, "High");
}

int main() {
    char stockName[50];
    printf("Enter the stock name: ");
    fgets(stockName, sizeof(stockName), stdin);
    stockName[strcspn(stockName, "\n")] = 0;

    struct StockData data[5];
    printf("Enter date (MM-DD) and price for 5 days:\n");
    for (int i = 0; i < 5; i++) {
        printf("Day %d - Date: ", i + 1);
        scanf("%5s", data[i].date);
        printf("      - Price: ");
        scanf("%lf", &data[i].price);
    }

    double returns[4];
    for (int i = 1; i < 5; i++) {
        returns[i - 1] = calculate_return(data[i].price, data[i - 1].price);
    }

    struct Metrics result;
    result.avgReturn = calculate_mean(returns, 4);
    result.volatility = calculate_std_dev(returns, 4);

    double totalDebt, totalAssets;
    printf("Enter total debt (in crores): ");
    scanf("%lf", &totalDebt);
    printf("Enter total assets (in crores): ");
    scanf("%lf", &totalAssets);

    result.debtRatio = totalDebt / totalAssets;

    assess_volatility_risk(result.volatility, result.volRiskLevel);
    assess_debt_risk(result.debtRatio, result.debtRiskLevel);
    assess_combined_risk(result.volRiskLevel, result.debtRiskLevel, result.combinedRiskLevel);

    printf("\n===== Metrics for stock: %s =====\n", stockName);
    printf("Average Daily Return : %.4f (%.2f%%)\n", result.avgReturn, result.avgReturn * 100);
    printf("Volatility           : %.4f (%.2f%%) — Risk: %s\n", result.volatility, result.volatility * 100, result.volRiskLevel);
    printf("Debt Ratio           : %.2f — Risk: %s\n", result.debtRatio, result.debtRiskLevel);
    printf("Combined Risk Level  : %s\n", result.combinedRiskLevel);

    return 0;
}
